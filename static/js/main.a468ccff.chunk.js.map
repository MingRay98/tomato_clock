{"version":3,"sources":["assets/icon-analysis.svg","assets/icon-list.svg","assets/tomato--green.svg","assets/tomato--orange.svg","assets/icon-bell.svg","assets/icon-cancel.svg","assets/icon-play--green.svg","assets/icon-pause--orange.svg","assets/music.mp3","clock.js","analysis.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","dayOfWeekArray","initialState","date","Date","restState","bellState","countDownAllSeconds","countDownSeconds","audio","alertText","clock","props","getNowTime","setState","addAudio","document","createElement","src","mp3","countDownTime","state","currentTime","play","clearInterval","countDownTimeID","changeState","pause","setInterval","restart","bell","setTime","min","getElementById","value","sec","length","checkNumber","console","log","parseInt","nubmer","test","getMinutes","minute","toLocaleString","getHours","hour","getcountDownText","className","msToTime","duration","seconds","minutes","Math","floor","this","getNowTimeID","clockState","id","onClick","getFullYear","getMonth","getDate","getDay","style","flexDirection","alt","greenPlay","orangepause","cancel","greenTomato","redTomato","React","Component","dt","second","analysis","initClock","getSeconds","timerID","App","toDoThing","listImg","analysisImg","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a468ccff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-analysis.e96b4269.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-list.c5316630.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomato--green.4298a104.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomato--orange.f4d25225.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-bell.526aed07.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-cancel.872654be.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-play--green.a5c4a07e.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-pause--orange.5094d45d.svg\";","module.exports = __webpack_public_path__ + \"static/media/music.03ecd123.mp3\";","import React from 'react';\r\nimport greenTomato from './assets/tomato--green.svg';\r\nimport redTomato from './assets/tomato--orange.svg';\r\nimport bell from './assets/icon-bell.svg';\r\nimport cancel from './assets/icon-cancel.svg';\r\nimport greenPlay from './assets/icon-play--green.svg';\r\nimport orangepause from './assets/icon-pause--orange.svg';\r\nimport mp3 from './assets/music.mp3';\r\nimport './clock.css';\r\n\r\nconst dayOfWeekArray = [\r\n    '星期日','星期一','星期二','星期三','星期四','星期五','星期六'\r\n]\r\n\r\nconst initialState = {\r\n  date: new Date(),\r\n  restState : false,\r\n  bellState: false,\r\n  countDownAllSeconds: 300,\r\n  countDownSeconds: 300,\r\n  audio: null,\r\n  alertText: '',\r\n};\r\n\r\nclass clock extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = initialState;\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.getNowTimeID = setInterval(this.getNowTime, 1000);\r\n      this.countDownTimeID = setInterval(this.countDownTime, 1000);\r\n      this.addAudio();\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n      const {audio} = this.state;\r\n      clearInterval(this.getNowTimeID);\r\n      clearInterval(this.countDownTimeID);\r\n      audio.pause();\r\n    }\r\n\r\n    getNowTime = () => {\r\n        this.setState({\r\n          date: new Date()\r\n        });\r\n    }\r\n\r\n    addAudio = () => {\r\n      const audio = document.createElement(\"audio\");\r\n      audio.src = mp3;\r\n      this.setState({audio: audio});\r\n    }\r\n\r\n    countDownTime = () => {\r\n      const {countDownSeconds, countDownAllSeconds, audio} = this.state;\r\n      if(countDownSeconds !== 0){\r\n        this.setState({countDownSeconds: countDownSeconds - 1});\r\n      }else{\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n        clearInterval(this.countDownTimeID);\r\n        this.setState({countDownSeconds: countDownAllSeconds, restState: true});\r\n      }\r\n  }\r\n\r\n    changeState = () => {\r\n      const {restState, audio} = this.state;\r\n      if(restState) {\r\n        audio.pause();\r\n        this.countDownTimeID = setInterval(this.countDownTime, 1000);\r\n        this.setState({restState: false});\r\n      }else{\r\n        audio.play();\r\n        clearInterval(this.countDownTimeID);\r\n        this.setState({restState: true});\r\n      }\r\n    }\r\n\r\n    restart = () => {\r\n      const {countDownAllSeconds, audio} = this.state;\r\n      audio.play();\r\n      clearInterval(this.countDownTimeID);\r\n      this.setState({\r\n        countDownSeconds: countDownAllSeconds,\r\n        restState: true\r\n      });\r\n    }\r\n\r\n    bell = () => {\r\n      this.setState({bellState: true});\r\n    }\r\n\r\n    setTime = () => {\r\n      let min = document.getElementById(\"min\").value;\r\n      const sec = document.getElementById(\"sec\").value;\r\n      if(min.length === 0 || sec.length === 0){\r\n        this.setState({alertText:'請輸入正確格式的時間!!'});\r\n        return;\r\n      }\r\n      if(sec > 60){\r\n        this.setState({alertText:'秒數超過了~><'});\r\n        return;\r\n      }\r\n      if(!this.checkNumber(min) || !this.checkNumber(sec)){\r\n        console.log(this.checkNumber(min));\r\n        this.setState({alertText:'請輸入正確格式的時間!!'});\r\n        return;\r\n      }\r\n      const countDownSeconds = parseInt(min) * 60 + parseInt(sec);\r\n      this.setState({bellState: false, \r\n        countDownSeconds: countDownSeconds, \r\n        countDownAllSeconds: countDownSeconds,\r\n        alertText: ''});\r\n    }\r\n\r\n    checkNumber = (nubmer) => {\r\n      const re = /^\\+?[0-9][0-9]*$/;\r\n      if (re.test(nubmer)){\r\n        　return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    getMinutes = () => {\r\n        const {date} = this.state;\r\n        const minute = date.getMinutes();\r\n        const minuteString = minute.toLocaleString();\r\n        if(minuteString.length === 1)\r\n            return '0' + minute;\r\n        return minute;\r\n    }\r\n\r\n    getHours = () => {\r\n        const {date} = this.state;\r\n        const hour = date.getHours();\r\n        const hourString = hour.toLocaleString();\r\n        if(hourString.length === 1)\r\n            return '0' + hour;\r\n        return hour;\r\n    }\r\n\r\n    getcountDownText = () => {\r\n      const {restState} = this.state;\r\n      if(restState){\r\n        return (\r\n          <div className = 'rest'>\r\n            <div className = 'restTitle'>休息，<br/>\r\n            </div>\r\n            是為了下一次的路，<br/>\r\n            聽首歌休息一下吧~^^\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <div className = 'rest'>\r\n          <div className = 'restTitle'>Fighting!!<br/>\r\n          </div>\r\n          人生就是不停的戰鬥!!<br/>\r\n          在時間內完成自己想做的事情吧~\r\n        </div>\r\n      );\r\n    }\r\n    \r\n\r\n    msToTime = (duration) => {\r\n      let seconds = (duration % 60).toLocaleString();\r\n      let minutes = (Math.floor(duration / 60)).toLocaleString();\r\n      minutes = (minutes.length === 1) ? \"0\" + minutes : minutes;\r\n      seconds = (seconds.length === 1) ? \"0\" + seconds : seconds;\r\n    \r\n      return minutes + \":\" + seconds;\r\n    }\r\n  \r\n    render() {\r\n      const {date, restState, countDownSeconds, bellState, alertText} = this.state;\r\n      const {clockState} = this.props;\r\n      return (\r\n        <div className = \"main\">\r\n          {bellState && \r\n          <div className = \"tooltipBlock\">\r\n            <div className = \"tooltip\">\r\n                <div className = \"tooltipTitle\">設定時間:</div>\r\n                <div className = \"tooltipContent\" >\r\n                  請輸入想倒數的時間:<br/>\r\n                  <input className = \"tooltipInput\" id='min'></input>:\r\n                  <input className = \"tooltipInput\" id='sec'></input>\r\n                </div>\r\n                <div className = \"alert\">{alertText}</div>\r\n                <button className = \"tooltipButton\" onClick={this.setTime}>確定</button>\r\n            </div>\r\n          </div>}\r\n          <div className = \"nowTimeBlock\">\r\n            <div className = \"nowTime\">\r\n              <div className = \"dateTime\">\r\n                {date.getFullYear() + '/' + date.getMonth() + '/' + date.getDate()}\r\n              </div>\r\n              <div className = \"weekTime\">\r\n                {dayOfWeekArray[date.getDay()]}\r\n              </div>\r\n                {this.getHours() + ':' + this.getMinutes()}\r\n            </div>\r\n          </div>\r\n          <div className = \"countDownBlock\" style={{flexDirection: clockState? \"row\" : \"column-reverse\"}}>\r\n            <div className = \"countDownTimeBlock\">\r\n              <div className = \"countDownTime\">\r\n                {this.msToTime(countDownSeconds)}\r\n              </div>\r\n              <div className = \"countDownButtons\">\r\n                <button className = \"countDownButton\" onClick = {this.bell}>\r\n                  <img src={bell} className = \"countDownbuttonImg\" alt = \"logo\" />\r\n                </button>\r\n                <button className = \"playButton\" onClick = {this.changeState}>\r\n                  <img src={restState ? greenPlay : orangepause} className = \"playButtonImg\" alt = \"logo\" />\r\n                </button>\r\n                <button className = \"countDownButton\" onClick = {this.restart} >\r\n                  <img src={cancel} className = \"countDownbuttonImg\" alt = \"logo\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className = \"countDownText\">\r\n              {this.getcountDownText()}\r\n            </div>\r\n          </div>\r\n          <div className = \"tomatoClock\">\r\n            <img src={restState ? greenTomato : redTomato} className = \"tomatoImg\" alt = \"logo\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\nexport default clock;\r\n\r\n","import React from 'react';\r\nimport './analysis.css';\r\n\r\nconst initialState = {\r\n    dt : new Date(),\r\n    second: 0,\r\n  };\r\nclass analysis extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = initialState;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n          this.initClock,\r\n          1000\r\n        );\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    initClock = () => {\r\n        console.log('0.0');\r\n        const {dt} = this.state;\r\n        this.setState({second: dt.getSeconds()});\r\n    }\r\n\r\n  render() {\r\n    const {second} = this.state;\r\n    return (\r\n      <div className = \"main\">\r\n        <div className =\"title\">專注度練習</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default analysis;\r\n\r\n","import React from 'react';\nimport { BrowserRouter, Route, Link} from \"react-router-dom\"\nimport analysisImg from './assets/icon-analysis.svg';\nimport listImg from './assets/icon-list.svg';\nimport Clock from './clock';\nimport Analysis from './analysis';\nimport './App.css';\n\nconst initialState = {\n  clockState: true\n};\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  clock = () => {\n    this.setState({clockState: true});\n  }\n\n  toDoThing = () => {\n    this.setState({clockState: false});\n  }\n\n  render() {\n    const {clockState} = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"menu\">\n          <div className=\"menuButtons\" onClick = {this.clock}>\n            <img src={listImg} className=\"menuButtonImg\" alt=\"logo\" />\n          </div>\n          <div className=\"menuButtons\" onClick = {this.toDoThing}>\n            <img src={analysisImg} className=\"menuButtonImg\" alt=\"logo\" />\n          </div>\n        </div>\n        <div className=\"content\">\n          {!clockState &&\n            <div className = 'toDoThingBlock'>\n              <Analysis/>\n            </div>\n          }\n          <div className = 'clockBlock' style = {{width: clockState ? '100%':'50%'}}>\n            <Clock clockState = {clockState}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}